restart; with(linalg);
Phi := proc (C_local, in_data_local, n_local) local res, dir, i, j, coef, num, in_data_row_col, l_coef, l_in_data, phi; if n_local[1] <= m[1] and n_local[2] <= m[2] then res := in_data_local[n_local[1]+1, n_local[2]+1] else dir := [(1/2)*(sign(m[1]-n_local[1])+1)*(n_local[1]+1), (1/2)*(sign(m[2]-n_local[2])+1)*(n_local[2]+1)]; for i to m[1]+m[2]+2 do if C[i, 1] = dir then coef := C[i, 2] end if end do; num := (signum(-dir[1])+1)*n_local[1]+(signum(-dir[2])+1)*n_local[2]; if dir[1] = 0 then in_data_row_col := col(in_data_local, dir[2]) end if; if dir[2] = 0 then in_data_row_col := row(in_data_local, dir[1]) end if; l_coef := vectdim(coef); for i to l_coef-1 do phi[i] := in_data_row_col[i] end do; for i from l_coef to num do phi[i] := 0; for j to l_coef-1 do phi[i] := phi[i]-coef[l_coef-j]*phi[i-j]/coef[l_coef] end do end do; res := phi[num] end if; return res end proc;

#процедура, которая считает одномерные производящие функции
#ее аргументы - коэффициенты производящей функции и начальные данные
#start показывает, с какого члена суммируется ряд
GenFn := proc (M, Phi, start) 
#option trace;
local alpha, x, F, Q, j, c, phi, n; 
F := 0; Q := 0; n := vectdim(M)-1;
for alpha to n+1 do c[alpha-1] := M[alpha] end do; 
for alpha to n do phi[alpha-1] := Phi[alpha] end do; 
for alpha from n to start+n-1 do
    phi[alpha]:=0;
    for j to n do
       phi[alpha]:=phi[alpha]-c[j-1]*phi[alpha-n+j-1]
    od;
od;
for alpha to 2 do
   phi[alpha-1]:=phi[start+alpha-1];
od;
for alpha to n do 
       for x from 0 to alpha-1 do 
            F := F+c[alpha]*phi[x]/'t'^(x-alpha+1) 
       end do 
end do; 
F := collect(F, t); 
for alpha from 0 to n do Q := Q+c[alpha]*t^alpha end do; 
F:=F/Q/t^start;
return(F); 
end proc:


#процедура, которая считает "части" характеристического многочлена 
#c_local - матрица из коэфф. разностного уравнения, индексы начинаются с нуля
#m_local - какой "угол" надо вырезать из разностного уравнения
#(весь хар. мног. ищем ChPol(c,[-1,-1]);)
ChPol := proc(c_local, m_local)
local i,j,R;
#option trace;
R:=0;
for i from 0 to m[1] do
    for j from 0 to m[2] do
        if not(i<=m_local[1] and j<=m_local[2]) then 
           R:=R+c_local[i+1,j+1]*z^(i)*w^(j) 
        fi; 
    od;
od;
return(R);
end proc:


#пересчет индексов
indx := proc(a,b)
local a1,b1;
    if a=0 then a1:=m[1] else a1:=a-1 fi; 
    if b=0 then b1:=m[2] else b1:=b-1 fi;
    [a1,b1];
end proc:


#процедура, которая ищет производящую функцию решения задачи Коши
GenF := proc(C_local, in_data_local)
local i, j, T, add, repl, in_data_row_col, GeF;
#option trace;
T:=0;
for i from 0 to m[1]-1 do
   for j from 0 to m[2]-1 do
            T:=T+Phi(C,in_data,[i,j])/z^(i+1)/w^(j+1)*ChPol(c,[i,j]);
   od;
od;
for i from 1 to m[1]+m[2] do
    j:=i;
    repl:=z^(1-signum(C[i,1][1]))*w^(1-signum(C[i,1][2]));
    add:=z^C[i,1][1]*w^C[i,1][2];
    C[i,1];C[i,2];
    if C[i,1][1]=0 then in_data_row_col:=col(in_data_local,C[i,1][2]) fi;
    if C[i,1][2]=0 then in_data_row_col:=row(in_data_local,C[i,1][1]) fi;
    GeF:= GenFn(C[i,2],in_data_row_col,m[1]*(1-signum(C[i,1][1]))+m[2]*(1-signum(C[i,1][2])));
    T:=T+subs(t=repl,GeF)*ChPol(c,indx(C[i,1][1],C[i,1][2]))/add;
od;
T:=T/ChPol(c,[-1,-1]);
T:=simplify(T);
end proc:
